[{"authors":["admin"],"categories":null,"content":"I am a software developer at NASA JPL, where I work on mission planning software as well as support the Curiosity rover mission. My interests include programming language design and implementation, functional programming, human-computer interaction, and robotics.\nI\u0026rsquo;m currently listening to:   Signals and Threads - Yaron Minsky is really great at explaining functional programming concepts, as well as general software engineering.  Corecursive - Adam Gordon Bell interviews an array of fascinating people from various walks of software.  Other blogs to read:   Joel on Software - Joel Spolsky, of Stack Overflow fame, has a lot of great stories and strong opinions about software.  Hillel Wayne - Hillel has a lot of introspective and philosophical thoughts on formal methods and how we teach programming.  Jonathan Castello - A friend of mine, conversations with whom have shaped my worldview on software and computer science.  ","date":1663041772,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1663041772,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"/author/matt-dailis/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/author/matt-dailis/","section":"authors","summary":"I am a software developer at NASA JPL, where I work on mission planning software as well as support the Curiosity rover mission. My interests include programming language design and implementation, functional programming, human-computer interaction, and robotics.","tags":null,"title":"Matt Dailis","type":"authors"},{"authors":["Matt Dailis"],"categories":[],"content":"I don\u0026rsquo;t expect to update this page regularly - but in my day-to-day endeavors to learn new things, sometimes I feel like it would be beneficial to test these learnings and try to write about them.\nMy hope is that this blog will be these things for me:\n A place to track interesting things I\u0026rsquo;ve read/watched/listened to An outlet for my desire to teach people things, without needing to bother any real people A place to practice writing  If, in this blog for myself, you find something that you find interesting, or helps you learn something, great!\n","date":1663041772,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1663041772,"objectID":"42de41bdc39a93dc654c4e21ee036fcf","permalink":"/post/statement-of-intent/","publishdate":"2022-09-13T00:02:52-04:00","relpermalink":"/post/statement-of-intent/","section":"post","summary":"I'd like a place where I can write down my thoughts and share them with others.","tags":[],"title":"My intent for this website","type":"post"},{"authors":null,"categories":null,"content":"Here, I hope to keep a running list of things I\u0026rsquo;m reading/watching, with short sentence summaries, explanations, or recommendations for each.\nPurely Functional Data Structures (Chris Okasaki) I read through chapter 3. This dissertation shows that it is possible to perform \"amortized\" runtime analysis on purely functional data structures if your langauge supports laziness and memoization. I found the first few chapters easy to follow and thought he did a great job of explaining amortized analysis (I had never understood it before). I followed along in OCaml (turns out there's a `Lazy` module you can import!) I started to lose steam on the purely functional \"Bankers method\".  \"Compositional\" Compiler Correctness (Amal Ahmed) I've been a fan of Amal's work for a long time, and I've long wanted to dig into some of it, but was always intimidated. This presentation is a very accessible overview of the challenges of proving things about compilers when you don't know a priori what they will be linked with.  Types and Programming Languages (Benjamin Pierce) This book is a pre-requisite to those who want to study programming languages at Northeastern. I got it for myself as a graduation present, and have been flipping through chapters at random ever since.  Computer Architecture: A Quantitative Approach () - I've read diligently up to Chapter 4 Clean Code - I read entirely Extreme Programming Explained - I read half of Agile Principles -  Working Effectively With Legacy Code Domain Driven Design in F# - I read in its entirety Tiger Book (Appel) Postgres Internals https://postgrespro.com/community/books/internals [Programming as Theory Building](https://gist.github.com/onlurking/fc5c81d18cfce9ff81bc968a7f342fb1) [The Documentation System](https://documentation.divio.com/) Surely You're Joking, Mr. Feynman Thinking Fast and Slow Things I haven\u0026rsquo;t read, but would like to:\n The Pragmatic Programmer The Art of Computer Programming Black Book of OS fasterthanli.me on linking and loading The Little Typer The Dragon Book Peak: Secrets of the New Science of Expertise - recommended by a coworker Code  ","date":1663023600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1663023600,"objectID":"24732462aebc31a58c1a7d7b6fbcdc90","permalink":"/bibliography/","publishdate":"2022-09-13T00:00:00+01:00","relpermalink":"/bibliography/","section":"","summary":"Here, I hope to keep a running list of things I\u0026rsquo;m reading/watching, with short sentence summaries, explanations, or recommendations for each.\nPurely Functional Data Structures (Chris Okasaki) I read through chapter 3.","tags":null,"title":"Bibliography","type":"page"},{"authors":[],"categories":[],"content":"","date":1587096711,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1587096711,"objectID":"c636e8036903b3af3febf6ab1875a784","permalink":"/project/my-project-name/","publishdate":"2020-04-17T00:11:51-04:00","relpermalink":"/project/my-project-name/","section":"project","summary":"","tags":[],"title":"My Project Name","type":"project"}]